- name: disable available nodejs
  ansible.builtin.command: "dnf module disable nodejs -y"

- name: enable nodejs 20
  ansible.builtin.command: "dnf module enable nodejs:20 -y"

- name: install  nodejs 20
  ansible.builtin.package:
    name: "{{ item }}"
    state: present 
  loop:
  - nodejs
  - mysql

- name: add user expense
  ansible.builtin.user:
    name: expense

- name: import task from common role
  ansible.builtin.import_role:
    name: common
    tasks_from: app-pre-req

# - name: create app directory
#   ansible.builtin.file:
#     path: /app
#     state: "directory"

# - name: download applicaation code
#   ansible.builtin.get_url:
#     url: "https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip"
#     dest: /tmp/backend.zip

# - name: unarchive the application code
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip  #by default ansible think this is in ansible server trying to push to node
#     dest: /app
#     remote_src: yes 

- name: download dependencies
  ansible.builtin.command: npm install
  args:
    chdir: /app
#Change the working directory to somedir/ and run the command can achived by passing "args" keyword
#'args' is a task keyword, passed at the same level as the module

# - name: copy backend service
#   ansible.builtin.copy: 
#     src: backend.service
#     dest: /etc/systemd/system/backend.service
# copy module works only for copy files without variables.
# you can use template module if your file is having variables

- name: copy backend service
  ansible.builtin.template: 
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service

- name: install pymysql  to ansible
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9

- name: import mysql data
  community.mysql.mysql_db:
    login_user: root
    login_password: "{{ mysql_password }}"
    login_host: "{{ login_host }}"
    target: "/app/schema/backend.sql"
    state: "import"
    name: all

- name: daemon-reload #Load the service 
  ansible.builtin.systemd_service:
    state: restarted
    daemon_reload: true
    name: backend